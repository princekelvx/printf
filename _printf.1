.\" Automatically generated by Pandoc 2.5
.\"
.TH "_PRINTF" "1" "May, 2022" "1.0.0" ""
.hy
.SH NAME
.PP
_printf \- a custom implementation of the printf function
.SH SYNOPSIS
.PP
int _printf(const char *fmt, \&...);
.PP
int print_character(va_list c);
.PP
void print(const char *format, unsigned int *i, unsigned int *counter,
va_list *ap, flags_t *flags);
.PP
void init_flags(flags_t *flag, va_list *ap);
.PP
int _printf(const char *fmt, \&...);
.PP
int print_character(va_list c, flags_t *f);
.PP
int print_string(va_list s, flags_t *f);
.PP
int print_integer(va_list i, flags_t *f);
.PP
int print_d(va_list d, flags_t *f);
.PP
int print_binary(va_list b, flags_t *f);
.PP
int print_unsigned(va_list u, flags_t *f);
.PP
int print_hex(va_list x, flags_t *f);
.PP
int print_HEX(va_list X, flags_t *f);
.PP
int print_octal(va_list o, flags_t *f);
.PP
int print_reverse(va_list r, flags_t *f);
.PP
int print_STRING(va_list S, flags_t *f);
.PP
int print_pointer(va_list p, flags_t *f);
.PP
int print_ROT(va_list R, flags_t *f);
.SH DESCRIPTION
.PP
**_printf** produces output according to a \f[B]format\f[R] as described
below.
**_printf** writes out output to stdout under the control of a format
string that specifies how subsequent arguments are converted for output.
.SS Format of the format string
.PP
The format string is a character string.
It is composed of zero or more directives \- ordinary characters which
are copied unchanged to the output stream \- and conversion
specifications, each of which result in fetching zero or more subsequent
arguments.
Each conversion specification is introduced by the character %, and ends
with a conversion specifier.
In between, there may be zero or more flags.
The arguments must correspond properly with the conversion specifier.
Each conversion specifier asks for the next argument and it is an error
if insufficiently many arguments are given.
.SS Flag characters
.PP
\f[B]+\f[R] positive number \- for %d and %i
.PP
\f[B]\-\f[R] right alignment \- for %d and %i
.PP
\f[B]space\f[R] \- for all specifiers
.PP
\f[B]l and h\f[R] \- l for long and h for short
.PP
\f[B]#\f[R] \- adds prefix of 0x to %x and 0X to X
.SS Conversion specifiers
.PP
Conversion specifier is a character that specifies the type of
conversion to be applied:
.PP
\f[B]c\f[R] prints a single character
.PP
\f[B]s, S\f[R] \f[B]s\f[R] prints a string of characters, while
\f[B]S\f[R] prints a string of characters but replaces unprintble
characters with their hex value
.PP
\f[B]i\f[R] a conversion specifier for integers in base 10
.PP
\f[B]d\f[R] a conversion specifier for decimal (base 10) numbers
.PP
\f[B]x, X\f[R] \f[B]x\f[R] prints lowercase hexadecimals (base 16),
while \f[B]X\f[R] prints uppercase hexadecimals (base 16)
.PP
\f[B]p\f[R] a conversion specifier for pointers
.PP
\f[B]r\f[R] prints the reverse of a string
.PP
\f[B]R\f[R] prints a string in ROT13 format
.PP
\f[B]b\f[R] a conversion specifier for binary integers
.PP
\f[B]u\f[R] a conversion specifier for unsigned int
.PP
\f[B]o\f[R] a conversion specifier for octal (base 8)
.SH EXAMPLES
.PP
_printf(\[lq]%c\[rq], /single character/)
.PP
_printf(\[lq]%s\[rq], /string of characters/)
.PP
_printf(\[lq]%i\[rq], /base 10 integer/)
.PP
_printf(\[lq]%d\[rq], /decimal (base 10) numbers/)
.PP
_printf(\[lq]%x\[rq], /lowercase hexadecimal/)
.PP
_printf(\[lq]%X\[rq], /uppercase hexadecimal/)
.PP
_printf(\[lq]%S\[rq], /replace unprintable characters in a string with
their hex value/)
.PP
_printf(\[lq]%r\[rq], /reverse of a string/)
.PP
_printf(\[lq]%R\[rq], /ROT13 format/)
.PP
_printf(\[lq]%u\[rq], /unsigned int/)
.PP
_printf(\[lq]%b\[rq], /binary integer/)
.SH EXIT VALUES
.TP
.B \f[B]Number of characters printed\f[R]
Success
.TP
.B \f[B]\-1\f[R]
Failure
.SH BUGS
.PP
The output is unpreictable when you do not pass in a value to the
conversion specifier \- standard quirk.
.SH AUTHOR
.PP
Major \- Kelvin Adeyemo Allison Contributor \- Ihedioha Ezinwa Ezimma
.SH FILES
.PP
main.h
.PP
_printf.c
.PP
custom_func.c
.PP
base_cases.c
.PP
other_cases.c
.PP
more_cases.c
.SH CAVEATS
.PP
Refer to \f[I]bugs\f[R]
.SH COPYRIGHT
.PP
Copyright \[co] 2022 Kelvin Adeyemo Allison, Ihedioha Ezinwa Ezimma.
.SH AUTHORS
Kelvin Adeyemo Allison, Ihedioha Ezinwa Ezimma.
